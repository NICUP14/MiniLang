asm(".macro stack_snapshot")
asm("	push %r9")
asm("	push %r8")
asm("	push %rcx")
asm("	push %rdx")
asm("	push %rsi")
asm("	push %rdi")
asm(".endm")
asm(".macro stack_rewind")
asm("	pop %rdi")
asm("	pop %rsi")
asm("	pop %rdx")
asm("	pop %rcx")
asm("	pop %r8")
asm("	pop %r9")
asm(".endm")
asm(".macro printf_rsp fmt")
asm("   lea \fmt, %rdi")
asm("   mov %rsp, %rsi")
asm("   xor %rax, %rax")
asm("   call printf")
asm(".endm")
fun va_start((int64*)(list))
  ((int64)(va_start_callee) = (cast("int64", &(int64*)(va_start_list)) + 8))
  ((int64*)(va_start_callee_rbp) = cast("int64*", (int64)(va_start_callee)))
  ((int64*)(va_start_caller_rbp) = cast("int64*", *(int64*)(va_start_callee_rbp)))
  ((int64*)(va_start_reg_ptr) = cast("int64*", (cast("int64", (int64*)(va_start_callee_rbp)) + 24)))
  ((int64*)(va_start_stack_ptr) = cast("int64*", (cast("int64", (int64*)(va_start_caller_rbp)) + 24)))
  ((int64*)(va_start_list)[0] = 0)
  ((int64*)(va_start_list)[1] = cast("int64", (int64*)(va_start_reg_ptr)))
  ((int64*)(va_start_list)[2] = cast("int64", (int64*)(va_start_stack_ptr)))
  ret (int64*)(va_start_list)
end
fun va_arg((int64*)(list))
  ((int64)(va_arg_base) = 0)
  ((int64)(va_arg_idx) = (int64*)(va_arg_list)[0])
  if ((int64*)(va_arg_list)[0] <= 6)
    ((int64)(va_arg_base) = (int64*)(va_arg_list)[1])
  else
        ((int64)(va_arg_base) = (int64*)(va_arg_list)[2])
    ((int64)(va_arg_idx) = ((int64)(va_arg_idx) - 6))
  end
  ((int64*)(va_arg_list)[0] = ((int64*)(va_arg_list)[0] + 1))
  ((int64*)(va_arg_addr) = cast("int64*", ((int64)(va_arg_base) + ((int64)(va_arg_idx) * 8))))
  ret *(int64*)(va_arg_addr)
end
fun cond((bool)(maybe), (int64)(tval), (int64)(fval))
  ((int64)(cond_val) = (0 - 1))
  if ((bool)(cond_maybe) == true)
    ((int64)(cond_val) = (int64)(cond_tval))
  else
    ((int64)(cond_val) = (int64)(cond_fval))
  end
  ret (int64)(cond_val)
end
fun _max((int64)(cnt), ...)
  asm("stack_snapshot")
  va_start(&(int64[3])(_max_list))
  va_arg(&(int64[3])(_max_list))
  ((int64)(_max_ccnt) = (int64)(_max_cnt))
  ((int64)(_max_idx) = 0)
  ((int64)(_max_arg) = 0)
  ((int64)(_max_max) = 0)
  while ((int64)(_max_idx) < (int64)(_max_ccnt))
    ((int64)(_max_arg) = va_arg(&(int64[3])(_max_list)))
    ((int64)(_max_max) = cond(((int64)(_max_arg) > (int64)(_max_max)), (int64)(_max_arg), (int64)(_max_max)))
    ((int64)(_max_idx) = ((int64)(_max_idx) + 1))
  end
  ret (int64)(_max_max)
end
fun main()
  ((int64)(main_mx) = _max(5, 1, 2, 3, 4, 5))
  printf("Max: %lld", (int64)(main_mx))
  ret 0
end
